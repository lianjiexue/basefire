// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	Access        *access
	Address       *address
	Area          *area
	AreaProduct   *areaProduct
	Article       *article
	Banner        *banner
	Cart          *cart
	Category      *category
	Config        *config
	ConfigGroup   *configGroup
	File          *file
	Manager       *manager
	Menu          *menu
	News          *news
	Order         *order
	OrderAddress  *orderAddress
	OrderProducts *orderProducts
	Product       *product
	ProductImage  *productImage
	ProductSku    *productSku
	Role          *role
	RoleAccess    *roleAccess
	RoleMenu      *roleMenu
	Third         *third
	User          *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Access = &Q.Access
	Address = &Q.Address
	Area = &Q.Area
	AreaProduct = &Q.AreaProduct
	Article = &Q.Article
	Banner = &Q.Banner
	Cart = &Q.Cart
	Category = &Q.Category
	Config = &Q.Config
	ConfigGroup = &Q.ConfigGroup
	File = &Q.File
	Manager = &Q.Manager
	Menu = &Q.Menu
	News = &Q.News
	Order = &Q.Order
	OrderAddress = &Q.OrderAddress
	OrderProducts = &Q.OrderProducts
	Product = &Q.Product
	ProductImage = &Q.ProductImage
	ProductSku = &Q.ProductSku
	Role = &Q.Role
	RoleAccess = &Q.RoleAccess
	RoleMenu = &Q.RoleMenu
	Third = &Q.Third
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		Access:        newAccess(db, opts...),
		Address:       newAddress(db, opts...),
		Area:          newArea(db, opts...),
		AreaProduct:   newAreaProduct(db, opts...),
		Article:       newArticle(db, opts...),
		Banner:        newBanner(db, opts...),
		Cart:          newCart(db, opts...),
		Category:      newCategory(db, opts...),
		Config:        newConfig(db, opts...),
		ConfigGroup:   newConfigGroup(db, opts...),
		File:          newFile(db, opts...),
		Manager:       newManager(db, opts...),
		Menu:          newMenu(db, opts...),
		News:          newNews(db, opts...),
		Order:         newOrder(db, opts...),
		OrderAddress:  newOrderAddress(db, opts...),
		OrderProducts: newOrderProducts(db, opts...),
		Product:       newProduct(db, opts...),
		ProductImage:  newProductImage(db, opts...),
		ProductSku:    newProductSku(db, opts...),
		Role:          newRole(db, opts...),
		RoleAccess:    newRoleAccess(db, opts...),
		RoleMenu:      newRoleMenu(db, opts...),
		Third:         newThird(db, opts...),
		User:          newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Access        access
	Address       address
	Area          area
	AreaProduct   areaProduct
	Article       article
	Banner        banner
	Cart          cart
	Category      category
	Config        config
	ConfigGroup   configGroup
	File          file
	Manager       manager
	Menu          menu
	News          news
	Order         order
	OrderAddress  orderAddress
	OrderProducts orderProducts
	Product       product
	ProductImage  productImage
	ProductSku    productSku
	Role          role
	RoleAccess    roleAccess
	RoleMenu      roleMenu
	Third         third
	User          user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Access:        q.Access.clone(db),
		Address:       q.Address.clone(db),
		Area:          q.Area.clone(db),
		AreaProduct:   q.AreaProduct.clone(db),
		Article:       q.Article.clone(db),
		Banner:        q.Banner.clone(db),
		Cart:          q.Cart.clone(db),
		Category:      q.Category.clone(db),
		Config:        q.Config.clone(db),
		ConfigGroup:   q.ConfigGroup.clone(db),
		File:          q.File.clone(db),
		Manager:       q.Manager.clone(db),
		Menu:          q.Menu.clone(db),
		News:          q.News.clone(db),
		Order:         q.Order.clone(db),
		OrderAddress:  q.OrderAddress.clone(db),
		OrderProducts: q.OrderProducts.clone(db),
		Product:       q.Product.clone(db),
		ProductImage:  q.ProductImage.clone(db),
		ProductSku:    q.ProductSku.clone(db),
		Role:          q.Role.clone(db),
		RoleAccess:    q.RoleAccess.clone(db),
		RoleMenu:      q.RoleMenu.clone(db),
		Third:         q.Third.clone(db),
		User:          q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Access:        q.Access.replaceDB(db),
		Address:       q.Address.replaceDB(db),
		Area:          q.Area.replaceDB(db),
		AreaProduct:   q.AreaProduct.replaceDB(db),
		Article:       q.Article.replaceDB(db),
		Banner:        q.Banner.replaceDB(db),
		Cart:          q.Cart.replaceDB(db),
		Category:      q.Category.replaceDB(db),
		Config:        q.Config.replaceDB(db),
		ConfigGroup:   q.ConfigGroup.replaceDB(db),
		File:          q.File.replaceDB(db),
		Manager:       q.Manager.replaceDB(db),
		Menu:          q.Menu.replaceDB(db),
		News:          q.News.replaceDB(db),
		Order:         q.Order.replaceDB(db),
		OrderAddress:  q.OrderAddress.replaceDB(db),
		OrderProducts: q.OrderProducts.replaceDB(db),
		Product:       q.Product.replaceDB(db),
		ProductImage:  q.ProductImage.replaceDB(db),
		ProductSku:    q.ProductSku.replaceDB(db),
		Role:          q.Role.replaceDB(db),
		RoleAccess:    q.RoleAccess.replaceDB(db),
		RoleMenu:      q.RoleMenu.replaceDB(db),
		Third:         q.Third.replaceDB(db),
		User:          q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Access        IAccessDo
	Address       IAddressDo
	Area          IAreaDo
	AreaProduct   IAreaProductDo
	Article       IArticleDo
	Banner        IBannerDo
	Cart          ICartDo
	Category      ICategoryDo
	Config        IConfigDo
	ConfigGroup   IConfigGroupDo
	File          IFileDo
	Manager       IManagerDo
	Menu          IMenuDo
	News          INewsDo
	Order         IOrderDo
	OrderAddress  IOrderAddressDo
	OrderProducts IOrderProductsDo
	Product       IProductDo
	ProductImage  IProductImageDo
	ProductSku    IProductSkuDo
	Role          IRoleDo
	RoleAccess    IRoleAccessDo
	RoleMenu      IRoleMenuDo
	Third         IThirdDo
	User          IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Access:        q.Access.WithContext(ctx),
		Address:       q.Address.WithContext(ctx),
		Area:          q.Area.WithContext(ctx),
		AreaProduct:   q.AreaProduct.WithContext(ctx),
		Article:       q.Article.WithContext(ctx),
		Banner:        q.Banner.WithContext(ctx),
		Cart:          q.Cart.WithContext(ctx),
		Category:      q.Category.WithContext(ctx),
		Config:        q.Config.WithContext(ctx),
		ConfigGroup:   q.ConfigGroup.WithContext(ctx),
		File:          q.File.WithContext(ctx),
		Manager:       q.Manager.WithContext(ctx),
		Menu:          q.Menu.WithContext(ctx),
		News:          q.News.WithContext(ctx),
		Order:         q.Order.WithContext(ctx),
		OrderAddress:  q.OrderAddress.WithContext(ctx),
		OrderProducts: q.OrderProducts.WithContext(ctx),
		Product:       q.Product.WithContext(ctx),
		ProductImage:  q.ProductImage.WithContext(ctx),
		ProductSku:    q.ProductSku.WithContext(ctx),
		Role:          q.Role.WithContext(ctx),
		RoleAccess:    q.RoleAccess.WithContext(ctx),
		RoleMenu:      q.RoleMenu.WithContext(ctx),
		Third:         q.Third.WithContext(ctx),
		User:          q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
